{"ast":null,"code":"var _jsxFileName = \"/Users/houkjang/likorea/frontend/src/components/BoardPostView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getBoardPost, deleteBoard, getUser, addComment, deleteComment, updateComment, getComments } from '../api/boards';\nimport '../styles/BoardPostView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardPostView() {\n  _s();\n  const {\n    boardType,\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [canModify, setCanModify] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [editCommentText, setEditCommentText] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // 게시글과 댓글을 함께 불러오는 함수 업데이트\n  const fetchPostAndComments = async () => {\n    setLoading(true);\n    try {\n      // 게시글 데이터 가져오기\n      const data = await getBoardPost(boardType, postId);\n      setPost(data);\n      console.log(\"게시글 데이터:\", data);\n\n      // 댓글 데이터 별도로 가져오기 (새 API 사용)\n      try {\n        const commentsData = await getComments(postId);\n        if (commentsData && commentsData.comments && Array.isArray(commentsData.comments)) {\n          setComments(commentsData.comments);\n          console.log(`댓글 ${commentsData.comments.length}개 로드됨:`, commentsData.comments);\n        } else {\n          console.log(\"댓글 없음 또는 배열 아님:\", commentsData);\n          setComments([]);\n        }\n      } catch (commentError) {\n        console.error(\"댓글 로드 중 오류:\", commentError);\n        // 댓글 로드 실패 시 게시글의 댓글 데이터 사용 시도\n        if (data.comments && Array.isArray(data.comments)) {\n          setComments(data.comments);\n        } else {\n          setComments([]);\n        }\n      }\n\n      // 권한 확인\n      checkEditDeletePermission(data);\n    } catch (error) {\n      console.error(\"게시글 조회 오류:\", error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 컴포넌트 마운트 또는 페이지 이동 시 데이터 로드\n  useEffect(() => {\n    fetchPostAndComments();\n  }, [boardType, postId]);\n\n  // 필요할 때 데이터 새로고침\n  useEffect(() => {\n    if (isRefreshing) {\n      fetchPostAndComments();\n      setIsRefreshing(false);\n    }\n  }, [isRefreshing]);\n  const checkEditDeletePermission = async postData => {\n    if (!postData || !localStorage.getItem('authToken')) {\n      setCanModify(false);\n      return;\n    }\n    const currentUserId = localStorage.getItem('userId');\n    const currentUserAuthority = parseInt(localStorage.getItem('userAuthority') || '0');\n    const isSameUser = postData.author && postData.author.id === currentUserId;\n    if (isSameUser) {\n      setCanModify(true);\n      return;\n    }\n    try {\n      const authorData = await getUser(postData.author.id);\n      const authorAuthority = authorData && authorData.authority ? parseInt(authorData.authority) : 0;\n      setCanModify(currentUserAuthority > authorAuthority);\n    } catch (error) {\n      console.error(\"작성자 정보 조회 실패:\", error);\n      setCanModify(false);\n    }\n  };\n  const handleDelete = async () => {\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n      try {\n        const userId = localStorage.getItem('userId');\n        await deleteBoard(boardType, postId, userId);\n        navigate(`/boards/${boardType}`);\n      } catch (error) {\n        console.error(\"게시글 삭제 실패:\", error);\n        alert(\"삭제 권한이 없거나 오류가 발생했습니다.\");\n      }\n    }\n  };\n\n  // 댓글 수정 가능 여부 확인 - 에러 수정\n  const canModifyComment = comment => {\n    if (!localStorage.getItem('authToken') || !comment) return false;\n    const currentUserId = localStorage.getItem('userId');\n    const currentUserAuthority = parseInt(localStorage.getItem('userAuthority') || '0');\n\n    // author가 객체인지 문자열인지 확인\n    let commentAuthorId = '';\n    let commentAuthorAuthority = 0;\n    if (typeof comment.author === 'object' && comment.author !== null) {\n      // author가 객체인 경우\n      commentAuthorId = comment.author.id || '';\n      commentAuthorAuthority = comment.author.authority || 0;\n    } else {\n      // author가 문자열인 경우\n      commentAuthorId = comment.author || '';\n    }\n\n    // 현재 사용자와 작성자가 같거나 권한이 높으면 수정/삭제 가능\n    return commentAuthorId === currentUserId || currentUserAuthority > commentAuthorAuthority;\n  };\n\n  // 작성자 정보 추출 함수 - 안전하게 가져오기 (표시용)\n  const getAuthorId = author => {\n    if (!author) return '익명';\n    if (typeof author === 'object' && author !== null) {\n      return author.id || '익명';\n    }\n    return author || '익명';\n  };\n\n  // 댓글 작성 핸들러 - API 문서에 맞게 업데이트\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    if (!commentText.trim()) {\n      alert('댓글 내용을 입력해주세요.');\n      return;\n    }\n    if (!localStorage.getItem('authToken')) {\n      alert('로그인 후 댓글을 작성할 수 있습니다.');\n      return;\n    }\n    const userId = localStorage.getItem('userId');\n    try {\n      setLoading(true);\n      // API 문서에 맞게 요청 데이터 구성\n      const response = await addComment(boardType, postId, {\n        content: commentText,\n        // 댓글 내용\n        id: userId // 사용자 ID\n      });\n      console.log(\"댓글 작성 응답:\", response);\n      if (response && response.comment) {\n        // 새로운 댓글을 목록에 추가\n        const newComment = response.comment;\n\n        // 로컬 상태 업데이트\n        setComments(prevComments => [...prevComments, newComment]);\n\n        // 게시글의 댓글 목록도 업데이트 (필요한 경우)\n        if (post && post.comments) {\n          setPost(prevPost => ({\n            ...prevPost,\n            comments: [...(prevPost.comments || []), newComment]\n          }));\n        }\n\n        // 입력 필드 초기화\n        setCommentText('');\n        alert('댓글이 성공적으로 작성되었습니다.');\n      } else {\n        // 응답에 댓글 정보가 없는 경우 전체 데이터 다시 로드\n        fetchPostAndComments();\n      }\n    } catch (error) {\n      console.error(\"댓글 작성 오류:\", error);\n      alert(`댓글 작성 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleEditComment = comment => {\n    setEditingCommentId(comment.id || comment._id);\n    setEditCommentText(comment.content);\n  };\n  const handleCancelEditComment = () => {\n    setEditingCommentId(null);\n    setEditCommentText('');\n  };\n\n  // 댓글 수정 저장 - API 문서에 맞게 업데이트\n  const handleUpdateComment = async commentId => {\n    if (!editCommentText.trim()) {\n      alert('댓글 내용을 입력해주세요.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const userId = localStorage.getItem('userId');\n\n      // API 문서에 맞게 요청 데이터 구성\n      const response = await updateComment(boardType, postId, commentId, {\n        content: editCommentText,\n        // 수정할 댓글 내용\n        id: userId // 사용자 ID\n      });\n      console.log(\"댓글 수정 응답:\", response);\n      if (response && response.comment) {\n        const updatedComment = response.comment;\n\n        // 로컬 상태 업데이트\n        setComments(prevComments => prevComments.map(c => (c.id || c._id) === commentId ? updatedComment : c));\n\n        // 게시글의 댓글 목록도 업데이트 (필요한 경우)\n        if (post && post.comments) {\n          setPost(prevPost => ({\n            ...prevPost,\n            comments: (prevPost.comments || []).map(c => (c.id || c._id) === commentId ? updatedComment : c)\n          }));\n        }\n      } else {\n        // 응답에 댓글 정보가 없는 경우 전체 데이터 다시 로드\n        fetchPostAndComments();\n      }\n\n      // 수정 모드 종료 및 입력 필드 초기화\n      setEditingCommentId(null);\n      setEditCommentText('');\n      alert('댓글이 성공적으로 수정되었습니다.');\n    } catch (error) {\n      console.error(\"댓글 수정 오류:\", error);\n      alert(`댓글 수정 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 댓글 삭제 - API 문서에 맞게 업데이트\n  const handleDeleteComment = async commentId => {\n    if (!window.confirm('댓글을 삭제하시겠습니까?')) return;\n    try {\n      setLoading(true);\n      const userId = localStorage.getItem('userId');\n\n      // API 문서에 맞게 요청\n      await deleteComment(boardType, postId, commentId, userId);\n\n      // 로컬 상태에서 삭제된 댓글 제거\n      setComments(prevComments => prevComments.filter(c => (c.id || c._id) !== commentId));\n\n      // 게시글의 댓글 목록에서도 삭제 (필요한 경우)\n      if (post && post.comments) {\n        setPost(prevPost => ({\n          ...prevPost,\n          comments: (prevPost.comments || []).filter(c => (c.id || c._id) !== commentId)\n        }));\n      }\n      alert('댓글이 성공적으로 삭제되었습니다.');\n    } catch (error) {\n      console.error(\"댓글 삭제 오류:\", error);\n      alert(`댓글 삭제 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading && !post) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uAC8C\\uC2DC\\uAE00\\uC744 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 32\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"\\uC624\\uB958 \\uBC1C\\uC0DD: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 21\n  }, this);\n  if (!post) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uAC8C\\uC2DC\\uAE00\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"post-title\",\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), canModify && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/boards/${boardType}/${postId}/edit`),\n          className: \"action-button edit-button\",\n          children: \"\\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDelete,\n          className: \"action-button\",\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-meta\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"post-author\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uC791\\uC131\\uC790:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), \" \", post.author && post.author.id ? post.author.id : '알 수 없음']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"post-date\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uC791\\uC131\\uC77C:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), \" \", new Date(post.createdAt).toLocaleString(), post.updatedAt && post.updatedAt !== post.createdAt && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"update-date\",\n          children: [\"(\\uC218\\uC815\\uC77C: \", new Date(post.updatedAt).toLocaleString(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"post-views\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uC870\\uD68C\\uC218:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), \" \", post.viewCount || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"post-divider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: post.content\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uB313\\uAE00 (\", comments.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"comment-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-list\",\n        children: comments.map((comment, index) => {\n          const commentId = comment.id || comment._id || index;\n          const isEditing = editingCommentId === commentId;\n          const commentDate = new Date(comment.createdAt);\n\n          // 작성자 ID 추출 로직 업데이트 (API 응답 구조에 맞춤)\n          let authorId = '익명';\n          if (comment.author) {\n            if (typeof comment.author === 'object') {\n              authorId = comment.author.id || '익명';\n            } else {\n              authorId = comment.author;\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-item\",\n            children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-edit-form\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"comment-edit-textarea\",\n                value: editCommentText,\n                onChange: e => setEditCommentText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-edit-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateComment(commentId),\n                  disabled: loading,\n                  children: \"\\uC800\\uC7A5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancelEditComment,\n                  children: \"\\uCDE8\\uC18C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-content-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-author-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-author-id\",\n                  children: authorId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-date\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: commentDate.toLocaleDateString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 407,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: commentDate.toLocaleTimeString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-main\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-text\",\n                  children: comment.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 25\n                }, this), canModifyComment(comment) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-actions\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"comment-action-btn\",\n                    onClick: () => handleEditComment(comment),\n                    children: \"\\uC218\\uC815\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"comment-action-btn\",\n                    onClick: () => handleDeleteComment(commentId),\n                    children: \"\\uC0AD\\uC81C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 21\n            }, this)\n          }, commentId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-comments\",\n        children: \"\\uB313\\uAE00\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), localStorage.getItem('authToken') ? /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"comment-form\",\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"\\uB313\\uAE00 \\uC791\\uC131...\",\n          className: \"comment-textarea\",\n          value: commentText,\n          onChange: e => setCommentText(e.target.value),\n          disabled: loading,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"action-button\",\n          disabled: loading,\n          children: loading ? '작성 중...' : '댓글 달기'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"login-message\",\n        children: \"\\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uB824\\uBA74 \\uB85C\\uADF8\\uC778\\uC774 \\uD544\\uC694\\uD569\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardPostView, \"1hAfit0ySohFxkZ3kpLGwlA7o9g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BoardPostView;\nexport default BoardPostView;\nvar _c;\n$RefreshReg$(_c, \"BoardPostView\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","getBoardPost","deleteBoard","getUser","addComment","deleteComment","updateComment","getComments","jsxDEV","_jsxDEV","BoardPostView","_s","boardType","postId","navigate","post","setPost","canModify","setCanModify","commentText","setCommentText","loading","setLoading","error","setError","comments","setComments","editingCommentId","setEditingCommentId","editCommentText","setEditCommentText","isRefreshing","setIsRefreshing","fetchPostAndComments","data","console","log","commentsData","Array","isArray","length","commentError","checkEditDeletePermission","message","postData","localStorage","getItem","currentUserId","currentUserAuthority","parseInt","isSameUser","author","id","authorData","authorAuthority","authority","handleDelete","window","confirm","userId","alert","canModifyComment","comment","commentAuthorId","commentAuthorAuthority","getAuthorId","handleCommentSubmit","e","preventDefault","trim","response","content","newComment","prevComments","prevPost","handleEditComment","_id","handleCancelEditComment","handleUpdateComment","commentId","updatedComment","map","c","handleDeleteComment","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","onClick","Date","createdAt","toLocaleString","updatedAt","viewCount","dangerouslySetInnerHTML","__html","index","isEditing","commentDate","authorId","value","onChange","target","disabled","toLocaleDateString","toLocaleTimeString","onSubmit","placeholder","required","type","_c","$RefreshReg$"],"sources":["/Users/houkjang/likorea/frontend/src/components/BoardPostView.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { \n  getBoardPost, \n  deleteBoard, \n  getUser, \n  addComment, \n  deleteComment, \n  updateComment,\n  getComments\n} from '../api/boards';\nimport '../styles/BoardPostView.css';\n\nfunction BoardPostView() {\n  const { boardType, postId } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [canModify, setCanModify] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [editCommentText, setEditCommentText] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // 게시글과 댓글을 함께 불러오는 함수 업데이트\n  const fetchPostAndComments = async () => {\n    setLoading(true);\n    try {\n      // 게시글 데이터 가져오기\n      const data = await getBoardPost(boardType, postId);\n      setPost(data);\n\n      console.log(\"게시글 데이터:\", data);\n      \n      // 댓글 데이터 별도로 가져오기 (새 API 사용)\n      try {\n        const commentsData = await getComments(postId);\n        if (commentsData && commentsData.comments && Array.isArray(commentsData.comments)) {\n          setComments(commentsData.comments);\n          console.log(`댓글 ${commentsData.comments.length}개 로드됨:`, commentsData.comments);\n        } else {\n          console.log(\"댓글 없음 또는 배열 아님:\", commentsData);\n          setComments([]);\n        }\n      } catch (commentError) {\n        console.error(\"댓글 로드 중 오류:\", commentError);\n        // 댓글 로드 실패 시 게시글의 댓글 데이터 사용 시도\n        if (data.comments && Array.isArray(data.comments)) {\n          setComments(data.comments);\n        } else {\n          setComments([]);\n        }\n      }\n      \n      // 권한 확인\n      checkEditDeletePermission(data);\n    } catch (error) {\n      console.error(\"게시글 조회 오류:\", error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 컴포넌트 마운트 또는 페이지 이동 시 데이터 로드\n  useEffect(() => {\n    fetchPostAndComments();\n  }, [boardType, postId]);\n\n  // 필요할 때 데이터 새로고침\n  useEffect(() => {\n    if (isRefreshing) {\n      fetchPostAndComments();\n      setIsRefreshing(false);\n    }\n  }, [isRefreshing]);\n\n  const checkEditDeletePermission = async (postData) => {\n    if (!postData || !localStorage.getItem('authToken')) {\n      setCanModify(false);\n      return;\n    }\n    \n    const currentUserId = localStorage.getItem('userId');\n    const currentUserAuthority = parseInt(localStorage.getItem('userAuthority') || '0');\n    \n    const isSameUser = postData.author && postData.author.id === currentUserId;\n    \n    if (isSameUser) {\n      setCanModify(true);\n      return;\n    }\n    \n    try {\n      const authorData = await getUser(postData.author.id);\n      const authorAuthority = authorData && authorData.authority ? \n        parseInt(authorData.authority) : 0;\n\n      setCanModify(currentUserAuthority > authorAuthority);\n    } catch (error) {\n      console.error(\"작성자 정보 조회 실패:\", error);\n      setCanModify(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n      try {\n        const userId = localStorage.getItem('userId');\n        await deleteBoard(boardType, postId, userId);\n        navigate(`/boards/${boardType}`);\n      } catch (error) {\n        console.error(\"게시글 삭제 실패:\", error);\n        alert(\"삭제 권한이 없거나 오류가 발생했습니다.\");\n      }\n    }\n  };\n\n  // 댓글 수정 가능 여부 확인 - 에러 수정\n  const canModifyComment = (comment) => {\n    if (!localStorage.getItem('authToken') || !comment) return false;\n    \n    const currentUserId = localStorage.getItem('userId');\n    const currentUserAuthority = parseInt(localStorage.getItem('userAuthority') || '0');\n    \n    // author가 객체인지 문자열인지 확인\n    let commentAuthorId = '';\n    let commentAuthorAuthority = 0;\n    \n    if (typeof comment.author === 'object' && comment.author !== null) {\n      // author가 객체인 경우\n      commentAuthorId = comment.author.id || '';\n      commentAuthorAuthority = comment.author.authority || 0;\n    } else {\n      // author가 문자열인 경우\n      commentAuthorId = comment.author || '';\n    }\n    \n    // 현재 사용자와 작성자가 같거나 권한이 높으면 수정/삭제 가능\n    return commentAuthorId === currentUserId || currentUserAuthority > commentAuthorAuthority;\n  };\n\n  // 작성자 정보 추출 함수 - 안전하게 가져오기 (표시용)\n  const getAuthorId = (author) => {\n    if (!author) return '익명';\n    \n    if (typeof author === 'object' && author !== null) {\n      return author.id || '익명';\n    }\n    \n    return author || '익명';\n  };\n\n  // 댓글 작성 핸들러 - API 문서에 맞게 업데이트\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!commentText.trim()) {\n      alert('댓글 내용을 입력해주세요.');\n      return;\n    }\n    \n    if (!localStorage.getItem('authToken')) {\n      alert('로그인 후 댓글을 작성할 수 있습니다.');\n      return;\n    }\n\n    const userId = localStorage.getItem('userId');\n    \n    try {\n      setLoading(true);\n      // API 문서에 맞게 요청 데이터 구성\n      const response = await addComment(boardType, postId, {\n        content: commentText,  // 댓글 내용\n        id: userId             // 사용자 ID\n      });\n      \n      console.log(\"댓글 작성 응답:\", response);\n      \n      if (response && response.comment) {\n        // 새로운 댓글을 목록에 추가\n        const newComment = response.comment;\n        \n        // 로컬 상태 업데이트\n        setComments(prevComments => [...prevComments, newComment]);\n        \n        // 게시글의 댓글 목록도 업데이트 (필요한 경우)\n        if (post && post.comments) {\n          setPost(prevPost => ({\n            ...prevPost,\n            comments: [...(prevPost.comments || []), newComment]\n          }));\n        }\n        \n        // 입력 필드 초기화\n        setCommentText('');\n        \n        alert('댓글이 성공적으로 작성되었습니다.');\n      } else {\n        // 응답에 댓글 정보가 없는 경우 전체 데이터 다시 로드\n        fetchPostAndComments();\n      }\n    } catch (error) {\n      console.error(\"댓글 작성 오류:\", error);\n      alert(`댓글 작성 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEditComment = (comment) => {\n    setEditingCommentId(comment.id || comment._id);\n    setEditCommentText(comment.content);\n  };\n\n  const handleCancelEditComment = () => {\n    setEditingCommentId(null);\n    setEditCommentText('');\n  };\n\n  // 댓글 수정 저장 - API 문서에 맞게 업데이트\n  const handleUpdateComment = async (commentId) => {\n    if (!editCommentText.trim()) {\n      alert('댓글 내용을 입력해주세요.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const userId = localStorage.getItem('userId');\n      \n      // API 문서에 맞게 요청 데이터 구성\n      const response = await updateComment(boardType, postId, commentId, {\n        content: editCommentText,  // 수정할 댓글 내용\n        id: userId                 // 사용자 ID\n      });\n      \n      console.log(\"댓글 수정 응답:\", response);\n      \n      if (response && response.comment) {\n        const updatedComment = response.comment;\n        \n        // 로컬 상태 업데이트\n        setComments(prevComments => \n          prevComments.map(c => ((c.id || c._id) === commentId ? updatedComment : c))\n        );\n        \n        // 게시글의 댓글 목록도 업데이트 (필요한 경우)\n        if (post && post.comments) {\n          setPost(prevPost => ({\n            ...prevPost,\n            comments: (prevPost.comments || []).map(c => \n              ((c.id || c._id) === commentId ? updatedComment : c)\n            )\n          }));\n        }\n      } else {\n        // 응답에 댓글 정보가 없는 경우 전체 데이터 다시 로드\n        fetchPostAndComments();\n      }\n      \n      // 수정 모드 종료 및 입력 필드 초기화\n      setEditingCommentId(null);\n      setEditCommentText('');\n      \n      alert('댓글이 성공적으로 수정되었습니다.');\n    } catch (error) {\n      console.error(\"댓글 수정 오류:\", error);\n      alert(`댓글 수정 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 댓글 삭제 - API 문서에 맞게 업데이트\n  const handleDeleteComment = async (commentId) => {\n    if (!window.confirm('댓글을 삭제하시겠습니까?')) return;\n    \n    try {\n      setLoading(true);\n      const userId = localStorage.getItem('userId');\n      \n      // API 문서에 맞게 요청\n      await deleteComment(boardType, postId, commentId, userId);\n      \n      // 로컬 상태에서 삭제된 댓글 제거\n      setComments(prevComments => \n        prevComments.filter(c => (c.id || c._id) !== commentId)\n      );\n      \n      // 게시글의 댓글 목록에서도 삭제 (필요한 경우)\n      if (post && post.comments) {\n        setPost(prevPost => ({\n          ...prevPost,\n          comments: (prevPost.comments || []).filter(c => \n            (c.id || c._id) !== commentId\n          )\n        }));\n      }\n      \n      alert('댓글이 성공적으로 삭제되었습니다.');\n    } catch (error) {\n      console.error(\"댓글 삭제 오류:\", error);\n      alert(`댓글 삭제 실패: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading && !post) return <p>게시글을 불러오는 중...</p>;\n  if (error) return <p>오류 발생: {error}</p>;\n  if (!post) return <p>게시글을 찾을 수 없습니다</p>;\n\n  return (\n    <div className=\"post-container\">\n      <div className=\"post-header\">\n        <h1 className=\"post-title\">{post.title}</h1>\n        {canModify && (\n          <div className=\"post-actions\">\n            <button \n              onClick={() => navigate(`/boards/${boardType}/${postId}/edit`)} \n              className=\"action-button edit-button\"\n            >\n              수정\n            </button>\n            <button \n              onClick={handleDelete}\n              className=\"action-button\"\n            >\n              삭제\n            </button>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"post-meta\">\n        <span className=\"post-author\">\n          <strong>작성자:</strong> {post.author && post.author.id ? post.author.id : '알 수 없음'}\n        </span>\n        <span className=\"post-date\">\n          <strong>작성일:</strong> {new Date(post.createdAt).toLocaleString()}\n          {post.updatedAt && post.updatedAt !== post.createdAt && (\n            <span className=\"update-date\"> \n              (수정일: {new Date(post.updatedAt).toLocaleString()})\n            </span>\n          )}\n        </span>\n        <span className=\"post-views\">\n          <strong>조회수:</strong> {post.viewCount || 0}\n        </span>\n      </div>\n      \n      <hr className=\"post-divider\" />\n\n      <div className=\"post-content\">\n        <div dangerouslySetInnerHTML={{ __html: post.content }} />\n      </div>\n\n      <div className=\"comment-section\">\n        <h3>댓글 ({comments.length})</h3>\n        <hr className=\"comment-divider\" />\n        \n        {comments.length > 0 ? (\n          <div className=\"comment-list\">\n            {comments.map((comment, index) => {\n              const commentId = comment.id || comment._id || index;\n              const isEditing = editingCommentId === commentId;\n              const commentDate = new Date(comment.createdAt);\n              \n              // 작성자 ID 추출 로직 업데이트 (API 응답 구조에 맞춤)\n              let authorId = '익명';\n              \n              if (comment.author) {\n                if (typeof comment.author === 'object') {\n                  authorId = comment.author.id || '익명';\n                } else {\n                  authorId = comment.author;\n                }\n              }\n              \n              return (\n                <div key={commentId} className=\"comment-item\">\n                  {isEditing ? (\n                    <div className=\"comment-edit-form\">\n                      <textarea\n                        className=\"comment-edit-textarea\"\n                        value={editCommentText}\n                        onChange={(e) => setEditCommentText(e.target.value)}\n                      />\n                      <div className=\"comment-edit-buttons\">\n                        <button \n                          onClick={() => handleUpdateComment(commentId)} \n                          disabled={loading}\n                        >\n                          저장\n                        </button>\n                        <button onClick={handleCancelEditComment}>취소</button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"comment-content-wrapper\">\n                      <div className=\"comment-author-info\">\n                        <div className=\"comment-author-id\">{authorId}</div>\n                        <div className=\"comment-date\">\n                          <div>{commentDate.toLocaleDateString()}</div>\n                          <div>{commentDate.toLocaleTimeString()}</div>\n                        </div>\n                      </div>\n                      <div className=\"comment-main\">\n                        <div className=\"comment-text\">{comment.content}</div>\n                        {canModifyComment(comment) && (\n                          <div className=\"comment-actions\">\n                            <button \n                              className=\"comment-action-btn\"\n                              onClick={() => handleEditComment(comment)}\n                            >\n                              수정\n                            </button>\n                            <button \n                              className=\"comment-action-btn\"\n                              onClick={() => handleDeleteComment(commentId)}\n                            >\n                              삭제\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"no-comments\">댓글이 없습니다.</p>\n        )}\n        \n        {localStorage.getItem('authToken') ? (\n          <form className=\"comment-form\" onSubmit={handleCommentSubmit}>\n            <textarea \n              placeholder=\"댓글 작성...\" \n              className=\"comment-textarea\"\n              value={commentText}\n              onChange={(e) => setCommentText(e.target.value)}\n              disabled={loading}\n              required\n            />\n            <button \n              type=\"submit\" \n              className=\"action-button\"\n              disabled={loading}\n            >\n              {loading ? '작성 중...' : '댓글 달기'}\n            </button>\n          </form>\n        ) : (\n          <p className=\"login-message\">댓글을 작성하려면 로그인이 필요합니다.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default BoardPostView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}