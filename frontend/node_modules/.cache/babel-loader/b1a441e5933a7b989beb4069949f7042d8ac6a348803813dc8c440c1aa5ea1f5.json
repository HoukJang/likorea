{"ast":null,"code":"var _jsxFileName = \"/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { getBoardPost } from '../api/boards';\nimport '../styles/BoardPostForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardPostForm() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    boardType,\n    postId\n  } = useParams(); // postId is optional for editing\n  const isEditMode = Boolean(postId);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n  const contentRef = useRef(null);\n  const [originalAuthor, setOriginalAuthor] = useState(null); // 원본 게시글 작성자 저장\n\n  // If editing, fetch post data and update state\n  useEffect(() => {\n    if (isEditMode) {\n      async function fetchPost() {\n        try {\n          const data = await getBoardPost(boardType, postId);\n          setTitle(data.title);\n          setContent(data.content);\n          if (contentRef.current) {\n            contentRef.current.innerHTML = data.content;\n          }\n          // 원 작성자 정보 저장\n          if (data.author) {\n            setOriginalAuthor(data.author);\n          }\n        } catch (error) {\n          console.error(\"게시글 조회 오류:\", error);\n        }\n      }\n      fetchPost();\n    }\n  }, [boardType, postId, isEditMode]);\n\n  // Convert text newlines to <br>\n  const convertContentToHtml = text => text.replace(/\\n/g, '<br>');\n\n  // Handle paste for images\n  const handlePaste = e => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    const currentUserId = localStorage.getItem('userId');\n    const currentContent = contentRef.current ? contentRef.current.innerHTML : content;\n    try {\n      let response;\n      if (isEditMode) {\n        // Update existing post\n        // 현재 사용자와 원 작성자가 다를 경우, 원 작성자 ID를 사용\n        const authorId = originalAuthor && originalAuthor.id !== currentUserId ? originalAuthor.id : currentUserId;\n        response = await fetch(`${BACKEND_URL}/api/boards/${boardType}/${postId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title,\n            content: currentContent,\n            id: currentUserId,\n            // 현재 로그인한 사용자 ID (인증용)\n            author: authorId // 보존할 작성자 ID\n          })\n        });\n      } else {\n        // Create new post\n        response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title,\n            content: currentContent,\n            id: currentUserId\n          })\n        });\n      }\n      if (!response.ok) throw new Error(isEditMode ? '게시글 수정 실패' : '게시글 생성 실패');\n      const data = await response.json();\n      setMessage(isEditMode ? '게시글이 수정되었습니다!' : '게시글이 생성되었습니다!');\n\n      // 게시글 상세 페이지로 이동\n      setTimeout(() => {\n        navigate(`/boards/${boardType}/${isEditMode ? postId : data.post.id}`);\n      }, 1000);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: isEditMode ? \"게시글 수정\" : `${boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uC81C\\uBAA9:\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true,\n          className: \"title-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          contentEditable: true,\n          ref: contentRef,\n          onInput: e => setContent(e.currentTarget.innerHTML),\n          onPaste: handlePaste,\n          className: \"content-editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: isEditMode ? \"수정 완료\" : \"게시글 생성\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardPostForm, \"VVO4vE0ZLg4xwYxwISIHOpSV64A=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = BoardPostForm;\nexport default BoardPostForm;\nvar _c;\n$RefreshReg$(_c, \"BoardPostForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","BACKEND_URL","getBoardPost","jsxDEV","_jsxDEV","BoardPostForm","_s","navigate","boardType","postId","isEditMode","Boolean","title","setTitle","content","setContent","message","setMessage","contentRef","originalAuthor","setOriginalAuthor","fetchPost","data","current","innerHTML","author","error","console","convertContentToHtml","text","replace","handlePaste","e","items","clipboardData","index","item","kind","type","startsWith","file","getAsFile","reader","FileReader","onload","event","img","document","createElement","src","target","result","alt","style","maxWidth","selection","window","getSelection","rangeCount","range","getRangeAt","deleteContents","insertNode","setStartAfter","removeAllRanges","addRange","currentTarget","dispatchEvent","Event","bubbles","appendChild","readAsDataURL","preventDefault","handleSubmit","localStorage","getItem","currentUserId","currentContent","response","authorId","id","fetch","method","headers","body","JSON","stringify","ok","Error","json","setTimeout","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","required","contentEditable","ref","onInput","onPaste","_c","$RefreshReg$"],"sources":["/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { getBoardPost } from '../api/boards';\nimport '../styles/BoardPostForm.css';\n\nfunction BoardPostForm() {\n  const navigate = useNavigate();\n  const { boardType, postId } = useParams(); // postId is optional for editing\n  const isEditMode = Boolean(postId);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n  const contentRef = useRef(null);\n  const [originalAuthor, setOriginalAuthor] = useState(null); // 원본 게시글 작성자 저장\n\n  // If editing, fetch post data and update state\n  useEffect(() => {\n    if (isEditMode) {\n      async function fetchPost() {\n        try {\n          const data = await getBoardPost(boardType, postId);\n          setTitle(data.title);\n          setContent(data.content);\n          if (contentRef.current) {\n            contentRef.current.innerHTML = data.content;\n          }\n          // 원 작성자 정보 저장\n          if (data.author) {\n            setOriginalAuthor(data.author);\n          }\n        } catch (error) {\n          console.error(\"게시글 조회 오류:\", error);\n        }\n      }\n      fetchPost();\n    }\n  }, [boardType, postId, isEditMode]);\n\n  // Convert text newlines to <br>\n  const convertContentToHtml = (text) => text.replace(/\\n/g, '<br>');\n\n  // Handle paste for images\n  const handlePaste = (e) => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function(event) {\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    \n    const currentUserId = localStorage.getItem('userId');\n    const currentContent = contentRef.current ? contentRef.current.innerHTML : content;\n    \n    try {\n      let response;\n      if (isEditMode) {\n        // Update existing post\n        // 현재 사용자와 원 작성자가 다를 경우, 원 작성자 ID를 사용\n        const authorId = originalAuthor && originalAuthor.id !== currentUserId ? \n                        originalAuthor.id : currentUserId;\n\n        response = await fetch(`${BACKEND_URL}/api/boards/${boardType}/${postId}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            title, \n            content: currentContent, \n            id: currentUserId,  // 현재 로그인한 사용자 ID (인증용)\n            author: authorId    // 보존할 작성자 ID\n          })\n        });\n      } else {\n        // Create new post\n        response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            title, \n            content: currentContent, \n            id: currentUserId \n          })\n        });\n      }\n\n      if (!response.ok) throw new Error(isEditMode ? '게시글 수정 실패' : '게시글 생성 실패');\n      \n      const data = await response.json();\n      setMessage(isEditMode ? '게시글이 수정되었습니다!' : '게시글이 생성되었습니다!');\n      \n      // 게시글 상세 페이지로 이동\n      setTimeout(() => {\n        navigate(`/boards/${boardType}/${isEditMode ? postId : data.post.id}`);\n      }, 1000);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h2 className=\"form-title\">\n        {isEditMode ? \"게시글 수정\" : `${boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성`}\n      </h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <input \n            type=\"text\" \n            placeholder=\"제목:\" \n            value={title} \n            onChange={(e) => setTitle(e.target.value)}\n            required\n            className=\"title-input\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <div \n            contentEditable\n            ref={contentRef}\n            onInput={(e) => setContent(e.currentTarget.innerHTML)}\n            onPaste={handlePaste}\n            className=\"content-editor\"\n          ></div>\n        </div>\n        <button type=\"submit\" className=\"submit-button\">\n          {isEditMode ? \"수정 완료\" : \"게시글 생성\"}\n        </button>\n      </form>\n      {message && <p className=\"message\">{message}</p>}\n    </div>\n  );\n}\n\nexport default BoardPostForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}