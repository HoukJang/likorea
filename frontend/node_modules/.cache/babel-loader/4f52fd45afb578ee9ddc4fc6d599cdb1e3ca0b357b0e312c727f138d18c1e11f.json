{"ast":null,"code":"var _jsxFileName = \"/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardPostForm() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    boardType\n  } = useParams();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = text => {\n    return text.replace(/\\n/g, '<br>');\n  };\n\n  // 새로 추가: 붙여넣기 이벤트 핸들러 (클립보드 이미지 처리)\n  const handlePaste = e => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          console.log(\"FileReader 결과:\", event.target.result); // 데이터 URL 확인\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          console.log(\"생성된 img 태그 src:\", img.src); // 이미지 태그의 src 로그\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            // 업데이트: 커서를 이미지 바로 뒤로 이동\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            // contentEditable 변경 알림을 위해 input 이벤트 발생\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    const email = localStorage.getItem('userEmail');\n    console.log(\"제출 전 content:\", content); // 제출 전 content 출력\n\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          content: convertContentToHtml(content),\n          email\n        })\n      });\n      if (!response.ok) throw new Error('게시글 생성 실패');\n      setMessage('게시글이 생성되었습니다!');\n      console.log('게시글 생성 성공:', response);\n      // navigate(`/boards/${boardType}`);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"1.2rem\",\n      margin: \"0 auto\",\n      maxWidth: \"800px\",\n      padding: \"0 2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"2rem\"\n      },\n      children: [boardType === \"general\" ? \"일반\" : boardType, \" \\uAC8C\\uC2DC\\uD310 - \\uAC8C\\uC2DC\\uAE00 \\uC0DD\\uC131\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uC81C\\uBAA9:\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true,\n          style: {\n            width: \"100%\",\n            fontSize: \"1.2rem\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          contentEditable: true,\n          onInput: e => setContent(e.currentTarget.innerHTML),\n          onPaste: handlePaste,\n          style: {\n            width: \"100%\",\n            minHeight: \"500px\",\n            fontSize: \"1.2rem\",\n            border: \"1px solid #ccc\",\n            padding: \"0.5rem\",\n            textAlign: \"left\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          fontSize: \"1.2rem\"\n        },\n        children: \"\\uAC8C\\uC2DC\\uAE00 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardPostForm, \"HEiHWGKJxXLjO445gwh2CkFAFms=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = BoardPostForm;\nexport default BoardPostForm;\nvar _c;\n$RefreshReg$(_c, \"BoardPostForm\");","map":{"version":3,"names":["React","useState","useNavigate","useParams","BACKEND_URL","jsxDEV","_jsxDEV","BoardPostForm","_s","navigate","boardType","title","setTitle","content","setContent","message","setMessage","convertContentToHtml","text","replace","handlePaste","e","items","clipboardData","index","item","kind","type","startsWith","file","getAsFile","reader","FileReader","onload","event","console","log","target","result","img","document","createElement","src","alt","style","maxWidth","selection","window","getSelection","rangeCount","range","getRangeAt","deleteContents","insertNode","setStartAfter","removeAllRanges","addRange","currentTarget","dispatchEvent","Event","bubbles","appendChild","readAsDataURL","preventDefault","handleSubmit","localStorage","getItem","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","textAlign","fontSize","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","placeholder","value","onChange","required","width","contentEditable","onInput","innerHTML","onPaste","minHeight","border","_c","$RefreshReg$"],"sources":["/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\n\nfunction BoardPostForm() {\n  const navigate = useNavigate();\n  const { boardType } = useParams();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = (text) => {\n    return text.replace(/\\n/g, '<br>');\n  };\n\n  // 새로 추가: 붙여넣기 이벤트 핸들러 (클립보드 이미지 처리)\n  const handlePaste = (e) => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function(event) {\n          console.log(\"FileReader 결과:\", event.target.result); // 데이터 URL 확인\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          console.log(\"생성된 img 태그 src:\", img.src); // 이미지 태그의 src 로그\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            // 업데이트: 커서를 이미지 바로 뒤로 이동\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            // contentEditable 변경 알림을 위해 input 이벤트 발생\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    const email = localStorage.getItem('userEmail');\n    console.log(\"제출 전 content:\", content); // 제출 전 content 출력\n\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title, content: convertContentToHtml(content), email })\n      });\n      if (!response.ok) throw new Error('게시글 생성 실패');\n      setMessage('게시글이 생성되었습니다!');\n      console.log('게시글 생성 성공:', response);\n      // navigate(`/boards/${boardType}`);\n    } catch(error) {\n      setMessage(error.message);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", fontSize: \"1.2rem\", margin: \"0 auto\", maxWidth: \"800px\", padding: \"0 2rem\" }}>\n      <h2 style={{ textAlign: \"center\", fontSize: \"2rem\" }}>\n        {boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성\n      </h2>\n      <form onSubmit={handleSubmit}>\n        <div style={{ marginBottom: \"1rem\" }}>\n          <input \n            type=\"text\" \n            placeholder=\"제목:\" \n            value={title} \n            onChange={(e)=> setTitle(e.target.value)}\n            required\n            style={{ width: \"100%\", fontSize: \"1.2rem\" }}\n          />\n        </div>\n        <div style={{ marginBottom: \"1rem\" }}>\n          {/* 기존 textarea를 contentEditable div로 교체 */}\n          <div \n            contentEditable\n            onInput={(e) => setContent(e.currentTarget.innerHTML)}\n            onPaste={handlePaste}\n            style={{ width: \"100%\", minHeight: \"500px\", fontSize: \"1.2rem\", border: \"1px solid #ccc\", padding: \"0.5rem\", textAlign: \"left\" }}\n          ></div>\n        </div>\n        <button type=\"submit\" style={{ fontSize: \"1.2rem\" }}>게시글 생성</button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n}\n\nexport default BoardPostForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}