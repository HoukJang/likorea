{"ast":null,"code":"var _jsxFileName = \"/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { getBoardPost, createBoard, updateBoard } from '../api/boards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardPostForm() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    boardType,\n    postId\n  } = useParams(); // postId is optional for editing\n  const isEditMode = Boolean(postId);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 기존 게시글이 있으면 불러와서 state에 저장\n  useEffect(() => {\n    if (isEditMode) {\n      async function fetchPost() {\n        try {\n          const data = await getBoardPost(boardType, postId);\n          setTitle(data.title);\n          setContent(data.content);\n        } catch (error) {\n          console.error(\"게시글 조회 오류:\", error);\n        }\n      }\n      fetchPost();\n    }\n  }, [boardType, postId, isEditMode]);\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = text => text.replace(/\\n/g, '<br>');\n\n  // 기존 handlePaste 그대로 사용\n  const handlePaste = e => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          console.log(\"FileReader 결과:\", event.target.result);\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          console.log(\"생성된 img 태그 src:\", img.src);\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    const email = localStorage.getItem('userEmail');\n    console.log(\"제출 전 content:\", content);\n    try {\n      let response;\n      if (isEditMode) {\n        response = await updateBoard(boardType, postId, {\n          title,\n          content: convertContentToHtml(content)\n        });\n      } else {\n        response = await createBoard(boardType, {\n          title,\n          content: convertContentToHtml(content),\n          email\n        });\n      }\n      if (!response) throw new Error(isEditMode ? '게시글 수정 실패' : '게시글 생성 실패');\n      setMessage(isEditMode ? '게시글이 수정되었습니다!' : '게시글이 생성되었습니다!');\n      console.log(isEditMode ? '게시글 수정 성공:' : '게시글 생성 성공:', response);\n      navigate(`/boards/${boardType}`);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"1.2rem\",\n      margin: \"0 auto\",\n      maxWidth: \"800px\",\n      padding: \"0 2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"2rem\"\n      },\n      children: isEditMode ? \"게시글 수정\" : `${boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uC81C\\uBAA9:\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true,\n          style: {\n            width: \"100%\",\n            fontSize: \"1.2rem\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          contentEditable: true,\n          onInput: e => setContent(e.currentTarget.innerHTML),\n          onPaste: handlePaste,\n          style: {\n            width: \"100%\",\n            minHeight: \"500px\",\n            fontSize: \"1.2rem\",\n            border: \"1px solid #ccc\",\n            padding: \"0.5rem\",\n            textAlign: \"left\"\n          }\n          // 초기 값 설정: dangerouslySetInnerHTML를 사용할 수 있으나 여기선 onInput으로 관리\n          ,\n          children: isEditMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: content\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          fontSize: \"1.2rem\"\n        },\n        children: isEditMode ? \"수정 완료\" : \"게시글 생성\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardPostForm, \"ybJY45REdoAQNhP54SQvnlfTu80=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = BoardPostForm;\nexport default BoardPostForm;\nvar _c;\n$RefreshReg$(_c, \"BoardPostForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","BACKEND_URL","getBoardPost","createBoard","updateBoard","jsxDEV","_jsxDEV","BoardPostForm","_s","navigate","boardType","postId","isEditMode","Boolean","title","setTitle","content","setContent","message","setMessage","fetchPost","data","error","console","convertContentToHtml","text","replace","handlePaste","e","items","clipboardData","index","item","kind","type","startsWith","file","getAsFile","reader","FileReader","onload","event","log","target","result","img","document","createElement","src","alt","style","maxWidth","selection","window","getSelection","rangeCount","range","getRangeAt","deleteContents","insertNode","setStartAfter","removeAllRanges","addRange","currentTarget","dispatchEvent","Event","bubbles","appendChild","readAsDataURL","preventDefault","handleSubmit","localStorage","getItem","email","response","Error","textAlign","fontSize","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","placeholder","value","onChange","required","width","contentEditable","onInput","innerHTML","onPaste","minHeight","border","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { getBoardPost, createBoard, updateBoard } from '../api/boards';\n\nfunction BoardPostForm() {\n  const navigate = useNavigate();\n  const { boardType, postId } = useParams(); // postId is optional for editing\n  const isEditMode = Boolean(postId);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 기존 게시글이 있으면 불러와서 state에 저장\n  useEffect(() => {\n    if (isEditMode) {\n      async function fetchPost() {\n        try {\n          const data = await getBoardPost(boardType, postId);\n          setTitle(data.title);\n          setContent(data.content);\n        } catch (error) {\n          console.error(\"게시글 조회 오류:\", error);\n        }\n      }\n      fetchPost();\n    }\n  }, [boardType, postId, isEditMode]);\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = (text) => text.replace(/\\n/g, '<br>');\n\n  // 기존 handlePaste 그대로 사용\n  const handlePaste = (e) => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function(event) {\n          console.log(\"FileReader 결과:\", event.target.result);\n          const img = document.createElement('img');\n          img.src = event.target.result;\n          console.log(\"생성된 img 태그 src:\", img.src);\n          img.alt = \"pasted-image\";\n          img.style.maxWidth = \"100%\";\n          const selection = window.getSelection();\n          if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(img);\n            range.setStartAfter(img);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          } else {\n            const target = e.currentTarget || e.target;\n            if (target) {\n              target.appendChild(img);\n              target.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          }\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    const email = localStorage.getItem('userEmail');\n    console.log(\"제출 전 content:\", content);\n\n    try {\n      let response;\n      if (isEditMode) {\n        response = await updateBoard(boardType, postId, { title, content: convertContentToHtml(content) });\n      } else {\n        response = await createBoard(boardType, { title, content: convertContentToHtml(content), email });\n      }\n      if (!response) throw new Error(isEditMode ? '게시글 수정 실패' : '게시글 생성 실패');\n      setMessage(isEditMode ? '게시글이 수정되었습니다!' : '게시글이 생성되었습니다!');\n      console.log(isEditMode ? '게시글 수정 성공:' : '게시글 생성 성공:', response);\n      navigate(`/boards/${boardType}`);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", fontSize: \"1.2rem\", margin: \"0 auto\", maxWidth: \"800px\", padding: \"0 2rem\" }}>\n      <h2 style={{ textAlign: \"center\", fontSize: \"2rem\" }}>\n        {isEditMode ? \"게시글 수정\" : `${boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성`}\n      </h2>\n      <form onSubmit={handleSubmit}>\n        <div style={{ marginBottom: \"1rem\" }}>\n          <input \n            type=\"text\" \n            placeholder=\"제목:\" \n            value={title} \n            onChange={(e) => setTitle(e.target.value)}\n            required\n            style={{ width: \"100%\", fontSize: \"1.2rem\" }}\n          />\n        </div>\n        <div style={{ marginBottom: \"1rem\" }}>\n          <div \n            contentEditable\n            onInput={(e) => setContent(e.currentTarget.innerHTML)}\n            onPaste={handlePaste}\n            style={{ width: \"100%\", minHeight: \"500px\", fontSize: \"1.2rem\", border: \"1px solid #ccc\", padding: \"0.5rem\", textAlign: \"left\" }}\n            // 초기 값 설정: dangerouslySetInnerHTML를 사용할 수 있으나 여기선 onInput으로 관리\n          >\n            {isEditMode ? <div dangerouslySetInnerHTML={{ __html: content }} /> : null}\n          </div>\n        </div>\n        <button type=\"submit\" style={{ fontSize: \"1.2rem\" }}>\n          {isEditMode ? \"수정 완료\" : \"게시글 생성\"}\n        </button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n}\n\nexport default BoardPostForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}