{"ast":null,"code":"var _jsxFileName = \"/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardPostForm() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    boardType\n  } = useParams();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = text => {\n    return text.replace(/\\n/g, '<br>');\n  };\n\n  // 새로 추가: 붙여넣기 이벤트 핸들러 (클립보드 이미지 처리)\n  const handlePaste = e => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          document.execCommand('insertHTML', false, `<img src=\"${event.target.result}\" alt=\"pasted-image\" />`);\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    // 수정: 작성자 정보를 localStorage에서 'userEmail'로 가져옴\n    const userId = localStorage.getItem('userId');\n    console.log(localStorage); // 디버깅용 로그\n    if (!email) {\n      setMessage('작성자 정보가 없습니다.');\n      return;\n    }\n    try {\n      // 변경: JSON body에 email 추가 (기존 authorId 대신)\n      const response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          content: convertContentToHtml(content),\n          email\n        })\n      });\n      if (!response.ok) throw new Error('게시글 생성 실패');\n      setMessage('게시글이 생성되었습니다!');\n      navigate(`/boards/${boardType}`);\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      fontSize: \"1.2rem\",\n      margin: \"0 auto\",\n      maxWidth: \"800px\",\n      padding: \"0 2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"2rem\"\n      },\n      children: [boardType === \"general\" ? \"일반\" : boardType, \" \\uAC8C\\uC2DC\\uD310 - \\uAC8C\\uC2DC\\uAE00 \\uC0DD\\uC131\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uC81C\\uBAA9:\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true,\n          style: {\n            width: \"100%\",\n            fontSize: \"1.2rem\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          contentEditable: true,\n          onInput: e => setContent(e.currentTarget.innerHTML),\n          onPaste: handlePaste,\n          style: {\n            width: \"100%\",\n            minHeight: \"500px\",\n            fontSize: \"1.2rem\",\n            border: \"1px solid #ccc\",\n            padding: \"0.5rem\",\n            textAlign: \"left\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          fontSize: \"1.2rem\"\n        },\n        children: \"\\uAC8C\\uC2DC\\uAE00 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardPostForm, \"HEiHWGKJxXLjO445gwh2CkFAFms=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = BoardPostForm;\nexport default BoardPostForm;\nvar _c;\n$RefreshReg$(_c, \"BoardPostForm\");","map":{"version":3,"names":["React","useState","useNavigate","useParams","BACKEND_URL","jsxDEV","_jsxDEV","BoardPostForm","_s","navigate","boardType","title","setTitle","content","setContent","message","setMessage","convertContentToHtml","text","replace","handlePaste","e","items","clipboardData","index","item","kind","type","startsWith","file","getAsFile","reader","FileReader","onload","event","document","execCommand","target","result","readAsDataURL","preventDefault","handleSubmit","localStorage","getItem","userId","console","log","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","style","textAlign","fontSize","margin","maxWidth","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","placeholder","value","onChange","required","width","contentEditable","onInput","currentTarget","innerHTML","onPaste","minHeight","border","_c","$RefreshReg$"],"sources":["/Users/houkjang/likorea/frontend/src/components/BoardPostForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BACKEND_URL } from '../config';\n\nfunction BoardPostForm() {\n  const navigate = useNavigate();\n  const { boardType } = useParams();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState('');\n\n  // 새로 추가: 텍스트를 HTML로 변환하는 함수 (예: 줄바꿈을 <br>로 변환)\n  const convertContentToHtml = (text) => {\n    return text.replace(/\\n/g, '<br>');\n  };\n\n  // 새로 추가: 붙여넣기 이벤트 핸들러 (클립보드 이미지 처리)\n  const handlePaste = (e) => {\n    const items = e.clipboardData.items;\n    for (const index in items) {\n      const item = items[index];\n      if (item.kind === 'file' && item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function(event) {\n          document.execCommand('insertHTML', false, `<img src=\"${event.target.result}\" alt=\"pasted-image\" />`);\n        };\n        reader.readAsDataURL(file);\n        e.preventDefault();\n      }\n    }\n  };\n\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n    if (!localStorage.getItem('authToken')) {\n      setMessage('로그인 후 게시글 생성이 가능합니다.');\n      return;\n    }\n    // 수정: 작성자 정보를 localStorage에서 'userEmail'로 가져옴\n    const userId = localStorage.getItem('userId');\n    console.log(localStorage); // 디버깅용 로그\n    if (!email) {\n      setMessage('작성자 정보가 없습니다.');\n      return;\n    }\n    try {\n      // 변경: JSON body에 email 추가 (기존 authorId 대신)\n      const response = await fetch(`${BACKEND_URL}/api/boards/${boardType}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title, content: convertContentToHtml(content), email })\n      });\n      if (!response.ok) throw new Error('게시글 생성 실패');\n      setMessage('게시글이 생성되었습니다!');\n      navigate(`/boards/${boardType}`);\n    } catch(error) {\n      setMessage(error.message);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", fontSize: \"1.2rem\", margin: \"0 auto\", maxWidth: \"800px\", padding: \"0 2rem\" }}>\n      <h2 style={{ textAlign: \"center\", fontSize: \"2rem\" }}>\n        {boardType === \"general\" ? \"일반\" : boardType} 게시판 - 게시글 생성\n      </h2>\n      <form onSubmit={handleSubmit}>\n        <div style={{ marginBottom: \"1rem\" }}>\n          <input \n            type=\"text\" \n            placeholder=\"제목:\" \n            value={title} \n            onChange={(e)=> setTitle(e.target.value)}\n            required\n            style={{ width: \"100%\", fontSize: \"1.2rem\" }}\n          />\n        </div>\n        <div style={{ marginBottom: \"1rem\" }}>\n          {/* 기존 textarea를 contentEditable div로 교체 */}\n          <div \n            contentEditable\n            onInput={(e) => setContent(e.currentTarget.innerHTML)}\n            onPaste={handlePaste}\n            style={{ width: \"100%\", minHeight: \"500px\", fontSize: \"1.2rem\", border: \"1px solid #ccc\", padding: \"0.5rem\", textAlign: \"left\" }}\n          ></div>\n        </div>\n        <button type=\"submit\" style={{ fontSize: \"1.2rem\" }}>게시글 생성</button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n}\n\nexport default BoardPostForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}