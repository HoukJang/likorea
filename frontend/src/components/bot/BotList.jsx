import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  CardActions,
  Grid,
  Typography,
  Button,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Tooltip
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import StopIcon from '@mui/icons-material/Stop';
import PostAddIcon from '@mui/icons-material/PostAdd';
import CircularProgress from '@mui/material/CircularProgress';
import { useNavigate } from 'react-router-dom';
import { deleteBot, updateBotStatus, createBotPost } from '../../api/bots';

export default function BotList({ bots, onUpdate, onReload, embedded = false }) {
  const navigate = useNavigate();
  const [deleteDialog, setDeleteDialog] = useState({ open: false, bot: null });
  const [postDialog, setPostDialog] = useState({ open: false, bot: null });
  const [task, setTask] = useState('');
  const [additionalPrompt, setAdditionalPrompt] = useState('');
  const [deletePosts, setDeletePosts] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleEdit = (botId, e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log('handleEdit called, embedded:', embedded, 'botId:', botId);
    
    if (embedded) {
      // ÏûÑÎ≤†ÎîîÎìú Î™®ÎìúÏóêÏÑúÎäî ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞ - Ï†àÎåÄ URL ÏÇ¨Ïö©
      const url = `${window.location.origin}/bots/edit/${botId}`;
      console.log('Opening URL:', url);
      const newWindow = window.open(url, '_blank');
      console.log('New window opened:', newWindow);
    } else {
      navigate(`/bots/edit/${botId}`);
    }
  };

  const handleDeleteClick = (bot) => {
    setDeleteDialog({ open: true, bot });
    setDeletePosts(false);
  };

  const handleDeleteConfirm = async () => {
    if (!deleteDialog.bot) return;

    try {
      setLoading(true);
      await deleteBot(deleteDialog.bot._id, deletePosts);
      setDeleteDialog({ open: false, bot: null });
      onUpdate();
    } catch (err) {
      console.error('Î¥á ÏÇ≠Ï†ú Ïã§Ìå®:', err);
      setError('Î¥á ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const handleStatusToggle = async (bot) => {
    try {
      const newStatus = bot.status === 'active' ? 'inactive' : 'active';
      await updateBotStatus(bot._id, newStatus);
      onUpdate();
    } catch (err) {
      console.error('ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§Ìå®:', err);
      setError('ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const handlePostClick = (bot) => {
    setPostDialog({ open: true, bot });
    setTask('');
    setAdditionalPrompt('');
  };

  const handleCreatePost = async () => {
    if (!postDialog.bot) return;
    // taskÎäî ÎπÑÏñ¥ÏûàÏñ¥ÎèÑ Í¥úÏ∞ÆÏùå (Long Island Ï†ÑÏ≤¥Í∞Ä Í∏∞Î≥∏Í∞í)

    console.log('üöÄ Í≤åÏãúÍ∏Ä ÏÉùÏÑ± ÏãúÏûë');
    console.log('Î¥á Ïù¥Î¶Ñ:', postDialog.bot.name);
    console.log('Î¥á ÌÉÄÏûÖ:', postDialog.bot.type);
    console.log('Î¥á Î™®Îç∏:', postDialog.bot.aiModel);
    console.log('ÏûëÏóÖ Ï£ºÏ†ú:', task);
    console.log('Ï∂îÍ∞Ä ÏßÄÏãúÏÇ¨Ìï≠:', additionalPrompt || 'ÏóÜÏùå');

    try {
      setLoading(true);
      const response = await createBotPost(postDialog.bot._id, task, additionalPrompt);
      
      console.log('üì¶ ÏÑúÎ≤Ñ ÏùëÎãµ:', response);
      
      const currentBot = postDialog.bot;
      setPostDialog({ open: false, bot: null });
      setTask('');
      setAdditionalPrompt('');
      
      // Ï¶âÏãú Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ ÏûëÏÑ±Ï§ë ÏÉÅÌÉú ÌëúÏãú
      onUpdate();
      
      // ÎßõÏßëÎ¥áÏùò Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ìè¨Ìï®ÎêúÎã§Îäî ÏïàÎÇ¥
      if (currentBot.type === 'restaurant') {
        alert('ÎßõÏßëÎ¥áÏù¥ Í≤åÏãúÍ∏Ä ÏûëÏÑ±ÏùÑ ÏãúÏûëÌñàÏäµÎãàÎã§. Í∞Å Î©îÎâ¥Î≥ÑÎ°ú Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ìè¨Ìï®Îê©ÎãàÎã§. ÏäπÏù∏ Ïãú ÏõêÌïòÎäî Ïù¥ÎØ∏ÏßÄÎßå ÎÇ®Í∏∞Í≥† ÏÇ≠Ï†úÌï¥Ï£ºÏÑ∏Ïöî.');
      } else {
        // ÏùºÎ∞ò Î¥áÏùò Í≤ΩÏö∞ Í∏∞Ï°¥ Î©îÏãúÏßÄ
        alert('Î¥áÏù¥ Í≤åÏãúÍ∏Ä ÏûëÏÑ±ÏùÑ ÏãúÏûëÌñàÏäµÎãàÎã§. ÏûëÏÑ±Ïù¥ ÏôÑÎ£åÎêòÎ©¥ ÏäπÏù∏ ÎåÄÍ∏∞ ÌÉ≠ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
      }
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ
      setError(null);
    } catch (err) {
      console.error('‚ùå Í≤åÏãúÍ∏Ä ÏÉùÏÑ± Ïã§Ìå®:', err);
      console.error('ÏóêÎü¨ ÏÉÅÏÑ∏:', err.response?.data);
      setError(err.response?.data?.error || 'Í≤åÏãúÍ∏Ä ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };


  const getStatusColor = (status) => {
    switch (status) {
      case 'active':
        return 'success';
      case 'inactive':
        return 'default';
      case 'maintenance':
        return 'warning';
      default:
        return 'default';
    }
  };

  const getModelName = (modelId) => {
    const modelNames = {
      'claude-3-haiku-20240307': 'Haiku 3',
      'claude-3-5-haiku-20241022': 'Haiku 3.5',
      'claude-3-5-sonnet-20241022': 'Sonnet 3.5',
      'claude-sonnet-4-20250514': 'Sonnet 4',
      'claude-opus-4-20250514': 'Opus 4',
      'gpt-3.5-turbo': 'GPT-3.5',
      'gpt-3.5-turbo-16k': 'GPT-3.5 16K',
      'gpt-4': 'GPT-4',
      'gpt-4-32k': 'GPT-4 32K',
      'gpt-4-turbo': 'GPT-4 Turbo',
      'gpt-4o': 'GPT-4o',
      'gpt-4o-mini': 'GPT-4o Mini'
    };
    return modelNames[modelId] || modelId;
  };

  return (
    <Box>
      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      <Grid container spacing={3}>
        {bots.map((bot) => (
          <Grid item xs={12} md={6} lg={4} key={bot._id}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                  <Typography variant="h6" component="div">
                    {bot.name}
                  </Typography>
                  <Chip
                    label={bot.status}
                    color={getStatusColor(bot.status)}
                    size="small"
                  />
                </Box>

                <Typography variant="body2" color="text.secondary" paragraph>
                  {bot.description}
                </Typography>

                <Box sx={{ mb: 2 }}>
                  <Chip
                    label={bot.type === 'news' ? 'Îâ¥Ïä§Î¥á' : bot.type === 'restaurant' ? 'ÎßõÏßëÎ¥á' : 'ÏùºÎ∞òÎ¥á'}
                    size="small"
                    color={bot.type === 'news' ? 'primary' : bot.type === 'restaurant' ? 'secondary' : 'default'}
                    sx={{ mr: 1 }}
                  />
                  <Chip
                    label={getModelName(bot.aiModel)}
                    size="small"
                    variant="outlined"
                    sx={{ mr: 1 }}
                  />
                  <Chip
                    label={`ÏûëÏÑ±: ${bot.stats?.totalPosts || 0}Í∞ú`}
                    size="small"
                    variant="outlined"
                    sx={{ mr: 1 }}
                  />
                  {bot.stats?.pendingPosts > 0 && (
                    <Chip
                      label={`ÎåÄÍ∏∞: ${bot.stats.pendingPosts}Í∞ú`}
                      size="small"
                      color="warning"
                      variant="outlined"
                      sx={{ mr: 1 }}
                    />
                  )}
                  {bot.taskStatus === 'generating' && (
                    <Chip
                      icon={<CircularProgress size={16} />}
                      label="ÏûëÏÑ±Ï§ë..."
                      size="small"
                      color="primary"
                      variant="filled"
                    />
                  )}
                </Box>

                {bot.username && (
                  <Typography variant="caption" color="text.secondary">
                    ID: {bot.username}
                  </Typography>
                )}
              </CardContent>

              <CardActions>
                <IconButton
                  size="small"
                  onClick={(e) => handleEdit(bot._id, e)}
                  aria-label="Ìé∏Ïßë"
                >
                  <EditIcon />
                </IconButton>
                <IconButton
                  size="small"
                  onClick={() => handleStatusToggle(bot)}
                  aria-label={bot.status === 'active' ? 'ÎπÑÌôúÏÑ±Ìôî' : 'ÌôúÏÑ±Ìôî'}
                  color={bot.status === 'active' ? 'success' : 'default'}
                >
                  {bot.status === 'active' ? <StopIcon /> : <PlayArrowIcon />}
                </IconButton>
                <Tooltip title={bot.taskStatus === 'generating' ? 'ÏûëÏÑ±Ï§ë...' : 'Í≤åÏãúÍ∏Ä ÏûëÏÑ±'}>
                  <span>
                    <IconButton
                      size="small"
                      onClick={() => handlePostClick(bot)}
                      aria-label="Í≤åÏãúÍ∏Ä ÏûëÏÑ±"
                      color="primary"
                      disabled={bot.taskStatus === 'generating'}
                    >
                      {bot.taskStatus === 'generating' ? (
                        <CircularProgress size={20} />
                      ) : (
                        <PostAddIcon />
                      )}
                    </IconButton>
                  </span>
                </Tooltip>
                <IconButton
                  size="small"
                  onClick={() => handleDeleteClick(bot)}
                  aria-label="ÏÇ≠Ï†ú"
                  color="error"
                >
                  <DeleteIcon />
                </IconButton>
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog open={deleteDialog.open} onClose={() => setDeleteDialog({ open: false, bot: null })}>
        <DialogTitle>Î¥á ÏÇ≠Ï†ú ÌôïÏù∏</DialogTitle>
        <DialogContent>
          <Typography paragraph>
            &apos;{deleteDialog.bot?.name}&apos; Î¥áÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
          </Typography>
          {deleteDialog.bot?.stats?.totalPosts > 0 && (
            <FormControl fullWidth sx={{ mt: 2 }}>
              <InputLabel>Í≤åÏãúÍ∏Ä Ï≤òÎ¶¨</InputLabel>
              <Select
                value={deletePosts}
                label="Í≤åÏãúÍ∏Ä Ï≤òÎ¶¨"
                onChange={(e) => setDeletePosts(e.target.value)}
              >
                <MenuItem value={false}>Í≤åÏãúÍ∏Ä Ïú†ÏßÄ (Î¥á Ïó∞Í≤∞Îßå Ìï¥Ï†ú)</MenuItem>
                <MenuItem value={true}>Í≤åÏãúÍ∏ÄÎèÑ Ìï®Íªò ÏÇ≠Ï†ú</MenuItem>
              </Select>
            </FormControl>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialog({ open: false, bot: null })}>
            Ï∑®ÏÜå
          </Button>
          <Button
            onClick={handleDeleteConfirm}
            color="error"
            disabled={loading}
          >
            ÏÇ≠Ï†ú
          </Button>
        </DialogActions>
      </Dialog>

      {/* Í≤åÏãúÍ∏Ä ÏûëÏÑ± Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog 
        open={postDialog.open} 
        onClose={() => setPostDialog({ open: false, bot: null })}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Î¥áÏúºÎ°ú Í≤åÏãúÍ∏Ä ÏûëÏÑ±</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" paragraph>
            Î¥á: {postDialog.bot?.name} ({postDialog.bot?.type === 'news' ? 'Îâ¥Ïä§Î¥á' : postDialog.bot?.type === 'restaurant' ? 'ÎßõÏßëÎ¥á' : 'ÏùºÎ∞òÎ¥á'})
          </Typography>
          <TextField
            fullWidth
            label={
              postDialog.bot?.type === 'restaurant' 
                ? "Î†àÏä§ÌÜ†Îûë Ï†ïÎ≥¥ (Ïù¥Î¶Ñ, Ï£ºÏÜå)"
                : postDialog.bot?.type === 'news'
                ? "ÌÅ¨Î°§ÎßÅÌï† ÏßÄÏó≠Î™Ö (ÎπÑÏõåÎëêÎ©¥ Long Island Ï†ÑÏ≤¥)"
                : "ÏûëÏóÖ ÎÇ¥Ïö©"
            }
            value={task}
            onChange={(e) => setTask(e.target.value)}
            placeholder={
              postDialog.bot?.type === 'restaurant'
                ? "Ïòà: Sichuan Garden, 2077 Nesconset Hwy, Stony Brook"
                : postDialog.bot?.type === 'news'
                ? "Ïòà: Great Neck ÎòêÎäî Great Neck/Flushing/Manhasset"
                : "ÏûëÏóÖ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            }
            margin="normal"
            helperText={
              postDialog.bot?.type === 'restaurant'
                ? "Î†àÏä§ÌÜ†Îûë Ïù¥Î¶ÑÍ≥º Ï£ºÏÜåÎ•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                : postDialog.bot?.type === 'news'
                ? "Ïó¨Îü¨ ÏßÄÏó≠ÏùÄ / Î°ú Íµ¨Î∂ÑÌïòÏÑ∏Ïöî. ÏûÖÎ†•Ìïú ÏßÄÏó≠Ïùò Ïã§Ï†ú Îâ¥Ïä§Î•º ÌÅ¨Î°§ÎßÅÌïòÏó¨ ÏöîÏïΩÌï©ÎãàÎã§"
                : "Î¥áÏù¥ ÏàòÌñâÌï† ÏûëÏóÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            }
          />
          <TextField
            fullWidth
            label="Ï∂îÍ∞Ä ÏßÄÏãúÏÇ¨Ìï≠ (ÏÑ†ÌÉù)"
            value={additionalPrompt}
            onChange={(e) => setAdditionalPrompt(e.target.value)}
            placeholder={
              postDialog.bot?.type === 'restaurant'
                ? "Ïòà: ÎîîÏ†ÄÌä∏ Î©îÎâ¥ÎèÑ Ìè¨Ìï®Ìï¥ÏÑú Î¶¨Î∑∞Ìï¥Ï§ò"
                : postDialog.bot?.type === 'news'
                ? "Ïòà: ÌïúÏù∏ Ïª§ÎÆ§ÎãàÌã∞ÏôÄ Í¥ÄÎ†®Îêú Îâ¥Ïä§ ÏúÑÏ£ºÎ°ú"
                : "Ï∂îÍ∞Ä ÏßÄÏãúÏÇ¨Ìï≠"
            }
            margin="normal"
            multiline
            rows={3}
            helperText={
              postDialog.bot?.type === 'restaurant'
                ? "Î¶¨Î∑∞ ÏûëÏÑ±Ïóê ÎåÄÌïú Ï∂îÍ∞Ä ÏßÄÏãúÏÇ¨Ìï≠"
                : postDialog.bot?.type === 'news'
                ? "Îâ¥Ïä§ ÏÑ†ÌÉù Î∞è ÏöîÏïΩ Î∞©ÏãùÏóê ÎåÄÌïú Ï∂îÍ∞Ä ÏßÄÏãú"
                : "Ï∂îÍ∞ÄÏ†ÅÏù∏ ÏßÄÏãúÏÇ¨Ìï≠Ïù¥ ÏûàÎã§Î©¥ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPostDialog({ open: false, bot: null })}>
            Ï∑®ÏÜå
          </Button>
          <Button
            onClick={handleCreatePost}
            variant="contained"
            disabled={loading}
          >
            ÏûëÏÑ±
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}